<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>L3.Logging.logId (86 samples, 8.60%)</title><rect x="57.2" y="293" width="101.5" height="15.0" fill="rgb(220,39,25)" rx="2" ry="2" />
<text  x="60.20" y="303.5" >L3.Logging.l..</text>
</g>
<g >
<title>Text.Regex.Base.Context.matchM (249 samples, 24.90%)</title><rect x="826.6" y="149" width="293.8" height="15.0" fill="rgb(252,116,10)" rx="2" ry="2" />
<text  x="829.56" y="159.5" >Text.Regex.Base.Context.matchM</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap..&amp;. (7 samples, 0.70%)</title><rect x="374.6" y="69" width="8.3" height="15.0" fill="rgb(225,40,32)" rx="2" ry="2" />
<text  x="377.62" y="79.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.String.unwrap (3 samples, 0.30%)</title><rect x="512.7" y="101" width="3.5" height="15.0" fill="rgb(232,215,36)" rx="2" ry="2" />
<text  x="515.68" y="111.5" ></text>
</g>
<g >
<title>L3.Core.normalize (313 samples, 31.30%)</title><rect x="163.4" y="309" width="369.3" height="15.0" fill="rgb(232,107,21)" rx="2" ry="2" />
<text  x="166.40" y="319.5" >L3.Core.normalize</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap./= (4 samples, 0.40%)</title><rect x="382.9" y="69" width="4.7" height="15.0" fill="rgb(225,28,49)" rx="2" ry="2" />
<text  x="385.88" y="79.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\ (5 samples, 0.50%)</title><rect x="38.3" y="69" width="5.9" height="15.0" fill="rgb(205,18,41)" rx="2" ry="2" />
<text  x="41.32" y="79.5" ></text>
</g>
<g >
<title>System.Log.FastLogger.LoggerSet.pushLogStr (1 samples, 0.10%)</title><rect x="10.0" y="261" width="1.2" height="15.0" fill="rgb(248,146,32)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>Text.Regex.Base.Context.matchM (186 samples, 18.60%)</title><rect x="296.7" y="149" width="219.5" height="15.0" fill="rgb(234,23,47)" rx="2" ry="2" />
<text  x="299.74" y="159.5" >Text.Regex.Base.Context.matchM</text>
</g>
<g >
<title>L3.Logging.debugM (84 samples, 8.40%)</title><rect x="59.6" y="277" width="99.1" height="15.0" fill="rgb(250,39,53)" rx="2" ry="2" />
<text  x="62.56" y="287.5" >L3.Logging...</text>
</g>
<g >
<title>L3.Logging.debugM (265 samples, 26.50%)</title><rect x="203.5" y="245" width="312.7" height="15.0" fill="rgb(233,113,34)" rx="2" ry="2" />
<text  x="206.52" y="255.5" >L3.Logging.debugM</text>
</g>
<g >
<title>L3.Core.normalize0' (104 samples, 10.40%)</title><rect x="532.7" y="357" width="122.8" height="15.0" fill="rgb(219,184,3)" rx="2" ry="2" />
<text  x="535.74" y="367.5" >L3.Core.normali..</text>
</g>
<g >
<title>Text.Regex.Base.RegexLike.matchOnceText (180 samples, 18.00%)</title><rect x="303.8" y="133" width="212.4" height="15.0" fill="rgb(227,82,14)" rx="2" ry="2" />
<text  x="306.82" y="143.5" >Text.Regex.Base.RegexLike.ma..</text>
</g>
<g >
<title>all (1,000 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(215,104,16)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.== (3 samples, 0.30%)</title><rect x="154.0" y="69" width="3.5" height="15.0" fill="rgb(243,213,6)" rx="2" ry="2" />
<text  x="156.96" y="79.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.String.unwrap (1 samples, 0.10%)</title><rect x="647.2" y="133" width="1.2" height="15.0" fill="rgb(246,208,52)" rx="2" ry="2" />
<text  x="650.20" y="143.5" ></text>
</g>
<g >
<title>L3.Logging.logId (90 samples, 9.00%)</title><rect x="542.2" y="293" width="106.2" height="15.0" fill="rgb(207,144,37)" rx="2" ry="2" />
<text  x="545.18" y="303.5" >L3.Logging.lo..</text>
</g>
<g >
<title>Text.Regex.Posix.String.execute (53 samples, 5.30%)</title><rect x="95.0" y="133" width="62.5" height="15.0" fill="rgb(223,141,35)" rx="2" ry="2" />
<text  x="97.96" y="143.5" >Text.R..</text>
</g>
<g >
<title>L3.Core.normalize' (6 samples, 0.60%)</title><rect x="648.4" y="325" width="7.1" height="15.0" fill="rgb(225,78,39)" rx="2" ry="2" />
<text  x="651.38" y="335.5" ></text>
</g>
<g >
<title>L3.Core.normalize' (14 samples, 1.40%)</title><rect x="516.2" y="293" width="16.5" height="15.0" fill="rgb(231,18,6)" rx="2" ry="2" />
<text  x="519.22" y="303.5" ></text>
</g>
<g >
<title>Text.Regex.Base.Context.matchM (61 samples, 6.10%)</title><rect x="86.7" y="181" width="72.0" height="15.0" fill="rgb(223,0,35)" rx="2" ry="2" />
<text  x="89.70" y="191.5" >Text.Reg..</text>
</g>
<g >
<title>L3.Logging.debugU (1 samples, 0.10%)</title><rect x="10.0" y="341" width="1.2" height="15.0" fill="rgb(209,165,43)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>Morte.TestMorte.example13 (520 samples, 52.00%)</title><rect x="532.7" y="437" width="613.6" height="15.0" fill="rgb(221,89,12)" rx="2" ry="2" />
<text  x="535.74" y="447.5" >Morte.TestMorte.example13</text>
</g>
<g >
<title>Text.Regex.Base.Context.matchM (63 samples, 6.30%)</title><rect x="574.0" y="181" width="74.4" height="15.0" fill="rgb(211,205,37)" rx="2" ry="2" />
<text  x="577.04" y="191.5" >Text.Reg..</text>
</g>
<g >
<title>Control.Logging.loggingLogger (77 samples, 7.70%)</title><rect x="557.5" y="245" width="90.9" height="15.0" fill="rgb(214,31,30)" rx="2" ry="2" />
<text  x="560.52" y="255.5" >Control.Lo..</text>
</g>
<g >
<title>Control.Logging.loggingLogger (1 samples, 0.10%)</title><rect x="10.0" y="277" width="1.2" height="15.0" fill="rgb(211,88,33)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>Text.Regex.Base.Context.matchM (7 samples, 0.70%)</title><rect x="36.0" y="149" width="8.2" height="15.0" fill="rgb(218,212,36)" rx="2" ry="2" />
<text  x="38.96" y="159.5" ></text>
</g>
<g >
<title>L3.TestLoader.testWrapPrelude.(...) (1 samples, 0.10%)</title><rect x="10.0" y="437" width="1.2" height="15.0" fill="rgb(225,123,8)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.String.execute (166 samples, 16.60%)</title><rect x="316.8" y="101" width="195.9" height="15.0" fill="rgb(244,15,21)" rx="2" ry="2" />
<text  x="319.80" y="111.5" >Text.Regex.Posix.String.e..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.== (11 samples, 1.10%)</title><rect x="1101.5" y="37" width="13.0" height="15.0" fill="rgb(245,145,44)" rx="2" ry="2" />
<text  x="1104.50" y="47.5" ></text>
</g>
<g >
<title>Morte.TestMorte.example12 (413 samples, 41.30%)</title><rect x="45.4" y="437" width="487.3" height="15.0" fill="rgb(225,95,14)" rx="2" ry="2" />
<text  x="48.40" y="447.5" >Morte.TestMorte.example12</text>
</g>
<g >
<title>MAIN.MAIN (963 samples, 96.30%)</title><rect x="10.0" y="485" width="1136.3" height="15.0" fill="rgb(215,223,47)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >MAIN.MAIN</text>
</g>
<g >
<title>Control.Logging.debugS (77 samples, 7.70%)</title><rect x="67.8" y="261" width="90.9" height="15.0" fill="rgb(218,207,4)" rx="2" ry="2" />
<text  x="70.82" y="271.5" >Control.Lo..</text>
</g>
<g >
<title>Text.Regex.matchRegex (191 samples, 19.10%)</title><rect x="290.8" y="181" width="225.4" height="15.0" fill="rgb(230,203,31)" rx="2" ry="2" />
<text  x="293.84" y="191.5" >Text.Regex.matchRegex</text>
</g>
<g >
<title>L3.Core.normalize (104 samples, 10.40%)</title><rect x="532.7" y="341" width="122.8" height="15.0" fill="rgb(224,113,14)" rx="2" ry="2" />
<text  x="535.74" y="351.5" >L3.Core.normalize</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap..&amp;. (2 samples, 0.20%)</title><rect x="604.7" y="101" width="2.4" height="15.0" fill="rgb(250,162,53)" rx="2" ry="2" />
<text  x="607.72" y="111.5" ></text>
</g>
<g >
<title>Control.Logging.loggingLogger (9 samples, 0.90%)</title><rect x="33.6" y="213" width="10.6" height="15.0" fill="rgb(247,40,53)" rx="2" ry="2" />
<text  x="36.60" y="223.5" ></text>
</g>
<g >
<title>Control.Logging.debugS (79 samples, 7.90%)</title><rect x="555.2" y="261" width="93.2" height="15.0" fill="rgb(241,139,27)" rx="2" ry="2" />
<text  x="558.16" y="271.5" >Control.Log..</text>
</g>
<g >
<title>Text.Regex.Base.RegexLike.matchOnceText (242 samples, 24.20%)</title><rect x="834.8" y="133" width="285.6" height="15.0" fill="rgb(253,210,16)" rx="2" ry="2" />
<text  x="837.82" y="143.5" >Text.Regex.Base.RegexLike.matchOnceText</text>
</g>
<g >
<title>L3.Core.debugCore (95 samples, 9.50%)</title><rect x="536.3" y="325" width="112.1" height="15.0" fill="rgb(212,44,38)" rx="2" ry="2" />
<text  x="539.28" y="335.5" >L3.Core.debug..</text>
</g>
<g >
<title>L3.Loader.loadPrelude (1 samples, 0.10%)</title><rect x="10.0" y="373" width="1.2" height="15.0" fill="rgb(213,87,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.String.execute (7 samples, 0.70%)</title><rect x="36.0" y="101" width="8.2" height="15.0" fill="rgb(247,4,10)" rx="2" ry="2" />
<text  x="38.96" y="111.5" ></text>
</g>
<g >
<title>Text.Regex.matchRegexAll (189 samples, 18.90%)</title><rect x="293.2" y="165" width="223.0" height="15.0" fill="rgb(237,135,43)" rx="2" ry="2" />
<text  x="296.20" y="175.5" >Text.Regex.matchRegexAll</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap..&amp;. (3 samples, 0.30%)</title><rect x="113.8" y="101" width="3.6" height="15.0" fill="rgb(221,29,6)" rx="2" ry="2" />
<text  x="116.84" y="111.5" ></text>
</g>
<g >
<title>L3.Logging.logId (10 samples, 1.00%)</title><rect x="32.4" y="261" width="11.8" height="15.0" fill="rgb(228,31,46)" rx="2" ry="2" />
<text  x="35.42" y="271.5" ></text>
</g>
<g >
<title>Control.Logging.loggingLogger (77 samples, 7.70%)</title><rect x="67.8" y="245" width="90.9" height="15.0" fill="rgb(241,199,15)" rx="2" ry="2" />
<text  x="70.82" y="255.5" >Control.Lo..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\ (33 samples, 3.30%)</title><rect x="608.3" y="101" width="38.9" height="15.0" fill="rgb(223,197,44)" rx="2" ry="2" />
<text  x="611.26" y="111.5" >Tex..</text>
</g>
<g >
<title>Text.Regex.matchRegex (63 samples, 6.30%)</title><rect x="84.3" y="213" width="74.4" height="15.0" fill="rgb(212,138,24)" rx="2" ry="2" />
<text  x="87.34" y="223.5" >Text.Reg..</text>
</g>
<g >
<title>Data.FileEmbed.getDir (17 samples, 1.70%)</title><rect x="11.2" y="389" width="20.0" height="15.0" fill="rgb(215,173,25)" rx="2" ry="2" />
<text  x="14.18" y="399.5" ></text>
</g>
<g >
<title>Data.FileEmbed.fileList' (17 samples, 1.70%)</title><rect x="11.2" y="357" width="20.0" height="15.0" fill="rgb(233,208,16)" rx="2" ry="2" />
<text  x="14.18" y="367.5" ></text>
</g>
<g >
<title>L3.Logging.debugM (10 samples, 1.00%)</title><rect x="32.4" y="245" width="11.8" height="15.0" fill="rgb(217,116,27)" rx="2" ry="2" />
<text  x="35.42" y="255.5" ></text>
</g>
<g >
<title>Morte.TestMorte.parse (413 samples, 41.30%)</title><rect x="45.4" y="389" width="487.3" height="15.0" fill="rgb(236,42,37)" rx="2" ry="2" />
<text  x="48.40" y="399.5" >Morte.TestMorte.parse</text>
</g>
<g >
<title>Text.Regex.Posix.String.matchOnce (7 samples, 0.70%)</title><rect x="36.0" y="117" width="8.2" height="15.0" fill="rgb(252,196,24)" rx="2" ry="2" />
<text  x="38.96" y="127.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.String.unwrap (1 samples, 0.10%)</title><rect x="157.5" y="133" width="1.2" height="15.0" fill="rgb(222,132,20)" rx="2" ry="2" />
<text  x="160.50" y="143.5" ></text>
</g>
<g >
<title>L3.TestLoader.testEmbeddedPrelude (17 samples, 1.70%)</title><rect x="11.2" y="437" width="20.0" height="15.0" fill="rgb(243,124,8)" rx="2" ry="2" />
<text  x="14.18" y="447.5" ></text>
</g>
<g >
<title>Control.Logging.loggingLogger.willLog (222 samples, 22.20%)</title><rect x="254.3" y="197" width="261.9" height="15.0" fill="rgb(211,209,33)" rx="2" ry="2" />
<text  x="257.26" y="207.5" >Control.Logging.loggingLogger.willLog</text>
</g>
<g >
<title>Text.Regex.Posix.String.matchOnce (178 samples, 17.80%)</title><rect x="306.2" y="117" width="210.0" height="15.0" fill="rgb(239,59,16)" rx="2" ry="2" />
<text  x="309.18" y="127.5" >Text.Regex.Posix.String.mat..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\ (137 samples, 13.70%)</title><rect x="952.8" y="69" width="161.7" height="15.0" fill="rgb(222,78,29)" rx="2" ry="2" />
<text  x="955.82" y="79.5" >Text.Regex.Posix.Wra..</text>
</g>
<g >
<title>L3.Loader.wrapPrelude (1 samples, 0.10%)</title><rect x="10.0" y="421" width="1.2" height="15.0" fill="rgb(237,53,37)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>L3.Logging.debugU (94 samples, 9.40%)</title><rect x="537.5" y="309" width="110.9" height="15.0" fill="rgb(243,223,52)" rx="2" ry="2" />
<text  x="540.46" y="319.5" >L3.Logging.de..</text>
</g>
<g >
<title>L3.Loader.embeddedPreludeIO (17 samples, 1.70%)</title><rect x="11.2" y="421" width="20.0" height="15.0" fill="rgb(205,154,49)" rx="2" ry="2" />
<text  x="14.18" y="431.5" ></text>
</g>
<g >
<title>L3.Core.normalize (100 samples, 10.00%)</title><rect x="45.4" y="341" width="118.0" height="15.0" fill="rgb(249,160,32)" rx="2" ry="2" />
<text  x="48.40" y="351.5" >L3.Core.normal..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap..&amp;. (8 samples, 0.80%)</title><rect x="936.3" y="69" width="9.4" height="15.0" fill="rgb(214,146,20)" rx="2" ry="2" />
<text  x="939.30" y="79.5" ></text>
</g>
<g >
<title>Control.Logging.loggingLogger (315 samples, 31.50%)</title><rect x="748.7" y="213" width="371.7" height="15.0" fill="rgb(248,125,52)" rx="2" ry="2" />
<text  x="751.68" y="223.5" >Control.Logging.loggingLogger</text>
</g>
<g >
<title>System.Log.FastLogger.Logger.write.loop (1 samples, 0.10%)</title><rect x="10.0" y="133" width="1.2" height="15.0" fill="rgb(231,174,38)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>L3.Loader.wrapPrelude' (1 samples, 0.10%)</title><rect x="10.0" y="405" width="1.2" height="15.0" fill="rgb(222,187,4)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>L3.Logging.debugM (352 samples, 35.20%)</title><rect x="705.0" y="245" width="415.4" height="15.0" fill="rgb(251,118,1)" rx="2" ry="2" />
<text  x="708.02" y="255.5" >L3.Logging.debugM</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.== (8 samples, 0.80%)</title><rect x="503.2" y="37" width="9.5" height="15.0" fill="rgb(245,191,17)" rx="2" ry="2" />
<text  x="506.24" y="47.5" ></text>
</g>
<g >
<title>Main.main (962 samples, 96.20%)</title><rect x="11.2" y="469" width="1135.1" height="15.0" fill="rgb(215,205,37)" rx="2" ry="2" />
<text  x="14.18" y="479.5" >Main.main</text>
</g>
<g >
<title>Data.FileEmbed.fileList (17 samples, 1.70%)</title><rect x="11.2" y="373" width="20.0" height="15.0" fill="rgb(212,219,31)" rx="2" ry="2" />
<text  x="14.18" y="383.5" ></text>
</g>
<g >
<title>System.Log.FastLogger.IO.toBufIOWith.loop (1 samples, 0.10%)</title><rect x="10.0" y="181" width="1.2" height="15.0" fill="rgb(251,181,31)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>System.Log.FastLogger.FileIO.writeRawBufferPtr2FD (1 samples, 0.10%)</title><rect x="10.0" y="117" width="1.2" height="15.0" fill="rgb(248,129,37)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>System.Log.FastLogger.IO.toBufIOWith (1 samples, 0.10%)</title><rect x="10.0" y="197" width="1.2" height="15.0" fill="rgb(222,15,40)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>Text.Regex.Base.RegexLike.matchOnceText (7 samples, 0.70%)</title><rect x="36.0" y="133" width="8.2" height="15.0" fill="rgb(216,159,3)" rx="2" ry="2" />
<text  x="38.96" y="143.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\.\ (26 samples, 2.60%)</title><rect x="126.8" y="85" width="30.7" height="15.0" fill="rgb(244,100,18)" rx="2" ry="2" />
<text  x="129.82" y="95.5" >Te..</text>
</g>
<g >
<title>UNKNOWN (37 samples, 3.70%)</title><rect x="1146.3" y="485" width="43.7" height="15.0" fill="rgb(236,63,15)" rx="2" ry="2" />
<text  x="1149.34" y="495.5" >UNKN..</text>
</g>
<g >
<title>L3.TestLoader.testWrapPrelude (1 samples, 0.10%)</title><rect x="10.0" y="453" width="1.2" height="15.0" fill="rgb(238,80,5)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\.\ (4 samples, 0.40%)</title><rect x="39.5" y="53" width="4.7" height="15.0" fill="rgb(218,55,49)" rx="2" ry="2" />
<text  x="42.50" y="63.5" ></text>
</g>
<g >
<title>L3.Core.debugCore (93 samples, 9.30%)</title><rect x="48.9" y="325" width="109.8" height="15.0" fill="rgb(219,71,25)" rx="2" ry="2" />
<text  x="51.94" y="335.5" >L3.Core.debug..</text>
</g>
<g >
<title>Control.Logging.loggingLogger.willLog (72 samples, 7.20%)</title><rect x="73.7" y="229" width="85.0" height="15.0" fill="rgb(252,160,18)" rx="2" ry="2" />
<text  x="76.72" y="239.5" >Control.L..</text>
</g>
<g >
<title>L3.Logging.debugM (1 samples, 0.10%)</title><rect x="10.0" y="309" width="1.2" height="15.0" fill="rgb(224,149,47)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>L3.Core.debugCore (383 samples, 38.30%)</title><rect x="668.4" y="293" width="452.0" height="15.0" fill="rgb(206,69,39)" rx="2" ry="2" />
<text  x="671.44" y="303.5" >L3.Core.debugCore</text>
</g>
<g >
<title>L3.Util.mapR (313 samples, 31.30%)</title><rect x="163.4" y="325" width="369.3" height="15.0" fill="rgb(235,95,1)" rx="2" ry="2" />
<text  x="166.40" y="335.5" >L3.Util.mapR</text>
</g>
<g >
<title>Control.Logging.debugS (9 samples, 0.90%)</title><rect x="33.6" y="229" width="10.6" height="15.0" fill="rgb(220,163,22)" rx="2" ry="2" />
<text  x="36.60" y="239.5" ></text>
</g>
<g >
<title>L3.Core.normalize' (4 samples, 0.40%)</title><rect x="158.7" y="325" width="4.7" height="15.0" fill="rgb(221,160,18)" rx="2" ry="2" />
<text  x="161.68" y="335.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch (42 samples, 4.20%)</title><rect x="597.6" y="117" width="49.6" height="15.0" fill="rgb(240,166,25)" rx="2" ry="2" />
<text  x="600.64" y="127.5" >Text..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch (42 samples, 4.20%)</title><rect x="107.9" y="117" width="49.6" height="15.0" fill="rgb(221,144,14)" rx="2" ry="2" />
<text  x="110.94" y="127.5" >Text...</text>
</g>
<g >
<title>Text.Regex.Posix.String.matchOnce (59 samples, 5.90%)</title><rect x="578.8" y="149" width="69.6" height="15.0" fill="rgb(208,9,14)" rx="2" ry="2" />
<text  x="581.76" y="159.5" >Text.Re..</text>
</g>
<g >
<title>L3.Loader.wrapPrelude'.(...) (1 samples, 0.10%)</title><rect x="10.0" y="389" width="1.2" height="15.0" fill="rgb(251,205,40)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>L3.Logging.logId (272 samples, 27.20%)</title><rect x="195.3" y="261" width="320.9" height="15.0" fill="rgb(241,177,33)" rx="2" ry="2" />
<text  x="198.26" y="271.5" >L3.Logging.logId</text>
</g>
<g >
<title>L3.Core.normalize0 (104 samples, 10.40%)</title><rect x="532.7" y="373" width="122.8" height="15.0" fill="rgb(250,31,41)" rx="2" ry="2" />
<text  x="535.74" y="383.5" >L3.Core.normali..</text>
</g>
<g >
<title>L3.Loader.debugLoader (1 samples, 0.10%)</title><rect x="10.0" y="357" width="1.2" height="15.0" fill="rgb(250,71,42)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>L3.Core.debugCore (11 samples, 1.10%)</title><rect x="31.2" y="293" width="13.0" height="15.0" fill="rgb(215,76,10)" rx="2" ry="2" />
<text  x="34.24" y="303.5" ></text>
</g>
<g >
<title>L3.TestLoader.CAF:testWrapPrelude_r5gr (1 samples, 0.10%)</title><rect x="10.0" y="469" width="1.2" height="15.0" fill="rgb(244,229,38)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>Morte.TestMorte.example (413 samples, 41.30%)</title><rect x="45.4" y="421" width="487.3" height="15.0" fill="rgb(242,203,46)" rx="2" ry="2" />
<text  x="48.40" y="431.5" >Morte.TestMorte.example</text>
</g>
<g >
<title>L3.Logging.debugM (88 samples, 8.80%)</title><rect x="544.5" y="277" width="103.9" height="15.0" fill="rgb(254,65,19)" rx="2" ry="2" />
<text  x="547.54" y="287.5" >L3.Logging.d..</text>
</g>
<g >
<title>Text.Regex.Posix.String.execute (222 samples, 22.20%)</title><rect x="852.5" y="101" width="262.0" height="15.0" fill="rgb(244,187,41)" rx="2" ry="2" />
<text  x="855.52" y="111.5" >Text.Regex.Posix.String.execute</text>
</g>
<g >
<title>Morte.TestMorte.example.(...) (413 samples, 41.30%)</title><rect x="45.4" y="405" width="487.3" height="15.0" fill="rgb(211,182,40)" rx="2" ry="2" />
<text  x="48.40" y="415.5" >Morte.TestMorte.example.(...)</text>
</g>
<g >
<title>Text.Regex.matchRegexAll (254 samples, 25.40%)</title><rect x="820.7" y="165" width="299.7" height="15.0" fill="rgb(250,71,28)" rx="2" ry="2" />
<text  x="823.66" y="175.5" >Text.Regex.matchRegexAll</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\ (106 samples, 10.60%)</title><rect x="387.6" y="69" width="125.1" height="15.0" fill="rgb(233,168,8)" rx="2" ry="2" />
<text  x="390.60" y="79.5" >Text.Regex.Posi..</text>
</g>
<g >
<title>System.Log.FastLogger.IO.toBufIOWith.loop.\ (1 samples, 0.10%)</title><rect x="10.0" y="165" width="1.2" height="15.0" fill="rgb(215,55,27)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>Control.Logging.loggingLogger.willLog (8 samples, 0.80%)</title><rect x="34.8" y="197" width="9.4" height="15.0" fill="rgb(211,193,41)" rx="2" ry="2" />
<text  x="37.78" y="207.5" ></text>
</g>
<g >
<title>L3.Logging.logId (357 samples, 35.70%)</title><rect x="699.1" y="261" width="421.3" height="15.0" fill="rgb(221,27,5)" rx="2" ry="2" />
<text  x="702.12" y="271.5" >L3.Logging.logId</text>
</g>
<g >
<title>Control.Logging.loggingLogger.willLog (298 samples, 29.80%)</title><rect x="768.7" y="197" width="351.7" height="15.0" fill="rgb(253,78,7)" rx="2" ry="2" />
<text  x="771.74" y="207.5" >Control.Logging.loggingLogger.willLog</text>
</g>
<g >
<title>L3.Loader.embeddedPreludeIO' (17 samples, 1.70%)</title><rect x="11.2" y="405" width="20.0" height="15.0" fill="rgb(237,196,2)" rx="2" ry="2" />
<text  x="14.18" y="415.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\.\ (107 samples, 10.70%)</title><rect x="988.2" y="53" width="126.3" height="15.0" fill="rgb(239,149,1)" rx="2" ry="2" />
<text  x="991.22" y="63.5" >Text.Regex.Posi..</text>
</g>
<g >
<title>L3.Logging.debugU (282 samples, 28.20%)</title><rect x="183.5" y="277" width="332.7" height="15.0" fill="rgb(240,190,54)" rx="2" ry="2" />
<text  x="186.46" y="287.5" >L3.Logging.debugU</text>
</g>
<g >
<title>System.Log.FastLogger.Logger.pushLog.\ (1 samples, 0.10%)</title><rect x="10.0" y="229" width="1.2" height="15.0" fill="rgb(214,199,0)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>L3.Core.evalExpr (313 samples, 31.30%)</title><rect x="163.4" y="357" width="369.3" height="15.0" fill="rgb(209,177,20)" rx="2" ry="2" />
<text  x="166.40" y="367.5" >L3.Core.evalExpr</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\ (33 samples, 3.30%)</title><rect x="118.6" y="101" width="38.9" height="15.0" fill="rgb(225,77,36)" rx="2" ry="2" />
<text  x="121.56" y="111.5" >Tex..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch (169 samples, 16.90%)</title><rect x="915.1" y="85" width="199.4" height="15.0" fill="rgb(232,43,38)" rx="2" ry="2" />
<text  x="918.06" y="95.5" >Text.Regex.Posix.Wrap.wrap..</text>
</g>
<g >
<title>Text.Regex.Posix.String.matchOnce (58 samples, 5.80%)</title><rect x="90.2" y="149" width="68.5" height="15.0" fill="rgb(226,69,44)" rx="2" ry="2" />
<text  x="93.24" y="159.5" >Text.Re..</text>
</g>
<g >
<title>Text.Regex.Base.RegexLike.matchOnceText (59 samples, 5.90%)</title><rect x="89.1" y="165" width="69.6" height="15.0" fill="rgb(243,152,28)" rx="2" ry="2" />
<text  x="92.06" y="175.5" >Text.Re..</text>
</g>
<g >
<title>Text.Regex.matchRegex (256 samples, 25.60%)</title><rect x="818.3" y="181" width="302.1" height="15.0" fill="rgb(224,125,29)" rx="2" ry="2" />
<text  x="821.30" y="191.5" >Text.Regex.matchRegex</text>
</g>
<g >
<title>Text.Regex.Posix.String.matchOnce (240 samples, 24.00%)</title><rect x="837.2" y="117" width="283.2" height="15.0" fill="rgb(243,31,4)" rx="2" ry="2" />
<text  x="840.18" y="127.5" >Text.Regex.Posix.String.matchOnce</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap./= (1 samples, 0.10%)</title><rect x="607.1" y="101" width="1.2" height="15.0" fill="rgb(217,7,31)" rx="2" ry="2" />
<text  x="610.08" y="111.5" ></text>
</g>
<g >
<title>Control.Logging.loggingLogger.willLog (73 samples, 7.30%)</title><rect x="562.2" y="229" width="86.2" height="15.0" fill="rgb(242,9,15)" rx="2" ry="2" />
<text  x="565.24" y="239.5" >Control.Lo..</text>
</g>
<g >
<title>L3.Core.normalize0 (100 samples, 10.00%)</title><rect x="45.4" y="373" width="118.0" height="15.0" fill="rgb(211,104,48)" rx="2" ry="2" />
<text  x="48.40" y="383.5" >L3.Core.normal..</text>
</g>
<g >
<title>L3.Logging.logId (1 samples, 0.10%)</title><rect x="10.0" y="325" width="1.2" height="15.0" fill="rgb(213,90,31)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>Control.Logging.loggingLogger (237 samples, 23.70%)</title><rect x="236.6" y="213" width="279.6" height="15.0" fill="rgb(224,76,1)" rx="2" ry="2" />
<text  x="239.56" y="223.5" >Control.Logging.loggingLogger</text>
</g>
<g >
<title>L3.Logging.debugU (373 samples, 37.30%)</title><rect x="680.2" y="277" width="440.2" height="15.0" fill="rgb(238,9,11)" rx="2" ry="2" />
<text  x="683.24" y="287.5" >L3.Logging.debugU</text>
</g>
<g >
<title>Control.Logging.debugS (239 samples, 23.90%)</title><rect x="234.2" y="229" width="282.0" height="15.0" fill="rgb(247,102,16)" rx="2" ry="2" />
<text  x="237.20" y="239.5" >Control.Logging.debugS</text>
</g>
<g >
<title>L3.Core.evalExpr' (313 samples, 31.30%)</title><rect x="163.4" y="341" width="369.3" height="15.0" fill="rgb(216,51,11)" rx="2" ry="2" />
<text  x="166.40" y="351.5" >L3.Core.evalExpr'</text>
</g>
<g >
<title>Text.Regex.matchRegex (7 samples, 0.70%)</title><rect x="36.0" y="181" width="8.2" height="15.0" fill="rgb(218,12,35)" rx="2" ry="2" />
<text  x="38.96" y="191.5" ></text>
</g>
<g >
<title>System.Log.FastLogger.Logger.write (1 samples, 0.10%)</title><rect x="10.0" y="149" width="1.2" height="15.0" fill="rgb(222,220,38)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.== (1 samples, 0.10%)</title><rect x="43.0" y="37" width="1.2" height="15.0" fill="rgb(254,168,30)" rx="2" ry="2" />
<text  x="46.04" y="47.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.String.unwrap (5 samples, 0.50%)</title><rect x="1114.5" y="101" width="5.9" height="15.0" fill="rgb(211,151,4)" rx="2" ry="2" />
<text  x="1117.48" y="111.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\.\ (27 samples, 2.70%)</title><rect x="615.3" y="85" width="31.9" height="15.0" fill="rgb(242,177,6)" rx="2" ry="2" />
<text  x="618.34" y="95.5" >Te..</text>
</g>
<g >
<title>L3.Util.fmapR (313 samples, 31.30%)</title><rect x="163.4" y="373" width="369.3" height="15.0" fill="rgb(237,172,0)" rx="2" ry="2" />
<text  x="166.40" y="383.5" >L3.Util.fmapR</text>
</g>
<g >
<title>Text.Regex.matchRegexAll (64 samples, 6.40%)</title><rect x="572.9" y="197" width="75.5" height="15.0" fill="rgb(231,148,23)" rx="2" ry="2" />
<text  x="575.86" y="207.5" >Text.Reg..</text>
</g>
<g >
<title>Text.Regex.Base.RegexLike.matchOnceText (60 samples, 6.00%)</title><rect x="577.6" y="165" width="70.8" height="15.0" fill="rgb(243,206,48)" rx="2" ry="2" />
<text  x="580.58" y="175.5" >Text.Reg..</text>
</g>
<g >
<title>Text.Regex.matchRegexAll (62 samples, 6.20%)</title><rect x="85.5" y="197" width="73.2" height="15.0" fill="rgb(230,163,31)" rx="2" ry="2" />
<text  x="88.52" y="207.5" >Text.Reg..</text>
</g>
<g >
<title>Main.tests (962 samples, 96.20%)</title><rect x="11.2" y="453" width="1135.1" height="15.0" fill="rgb(229,198,5)" rx="2" ry="2" />
<text  x="14.18" y="463.5" >Main.tests</text>
</g>
<g >
<title>Text.Regex.matchRegex (65 samples, 6.50%)</title><rect x="571.7" y="213" width="76.7" height="15.0" fill="rgb(235,31,19)" rx="2" ry="2" />
<text  x="574.68" y="223.5" >Text.Reg..</text>
</g>
<g >
<title>Control.Logging.debugS (318 samples, 31.80%)</title><rect x="745.1" y="229" width="375.3" height="15.0" fill="rgb(246,174,21)" rx="2" ry="2" />
<text  x="748.14" y="239.5" >Control.Logging.debugS</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.== (3 samples, 0.30%)</title><rect x="643.7" y="69" width="3.5" height="15.0" fill="rgb(244,50,3)" rx="2" ry="2" />
<text  x="646.66" y="79.5" ></text>
</g>
<g >
<title>L3.Logging.debugU (10 samples, 1.00%)</title><rect x="32.4" y="277" width="11.8" height="15.0" fill="rgb(207,155,12)" rx="2" ry="2" />
<text  x="35.42" y="287.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch (133 samples, 13.30%)</title><rect x="355.7" y="85" width="157.0" height="15.0" fill="rgb(243,154,20)" rx="2" ry="2" />
<text  x="358.74" y="95.5" >Text.Regex.Posix.Wra..</text>
</g>
<g >
<title>System.Log.FastLogger.Logger.pushLog (1 samples, 0.10%)</title><rect x="10.0" y="245" width="1.2" height="15.0" fill="rgb(229,113,40)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>L3.Logging.debugU (90 samples, 9.00%)</title><rect x="52.5" y="309" width="106.2" height="15.0" fill="rgb(208,137,54)" rx="2" ry="2" />
<text  x="55.48" y="319.5" >L3.Logging.d..</text>
</g>
<g >
<title>Text.Regex.Posix.String.execute (54 samples, 5.40%)</title><rect x="583.5" y="133" width="63.7" height="15.0" fill="rgb(223,131,17)" rx="2" ry="2" />
<text  x="586.48" y="143.5" >Text.R..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap./= (6 samples, 0.60%)</title><rect x="945.7" y="69" width="7.1" height="15.0" fill="rgb(240,192,10)" rx="2" ry="2" />
<text  x="948.74" y="79.5" ></text>
</g>
<g >
<title>Text.Regex.matchRegexAll (7 samples, 0.70%)</title><rect x="36.0" y="165" width="8.2" height="15.0" fill="rgb(239,185,45)" rx="2" ry="2" />
<text  x="38.96" y="175.5" ></text>
</g>
<g >
<title>L3.Core.normalize0' (100 samples, 10.00%)</title><rect x="45.4" y="357" width="118.0" height="15.0" fill="rgb(237,145,35)" rx="2" ry="2" />
<text  x="48.40" y="367.5" >L3.Core.normal..</text>
</g>
<g >
<title>Text.Regex.Posix.Wrap./= (1 samples, 0.10%)</title><rect x="117.4" y="101" width="1.2" height="15.0" fill="rgb(222,205,48)" rx="2" ry="2" />
<text  x="120.38" y="111.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch.\.\ (81 samples, 8.10%)</title><rect x="417.1" y="53" width="95.6" height="15.0" fill="rgb(215,22,35)" rx="2" ry="2" />
<text  x="420.10" y="63.5" >Text.Regex...</text>
</g>
<g >
<title>System.Log.FastLogger.Logger.pushLog.\.\ (1 samples, 0.10%)</title><rect x="10.0" y="213" width="1.2" height="15.0" fill="rgb(253,63,30)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>Data.FileEmbed.liftPair2 (8 samples, 0.80%)</title><rect x="21.8" y="341" width="9.4" height="15.0" fill="rgb(216,76,5)" rx="2" ry="2" />
<text  x="24.80" y="351.5" ></text>
</g>
<g >
<title>Text.Regex.Posix.Wrap.wrapMatch (6 samples, 0.60%)</title><rect x="37.1" y="85" width="7.1" height="15.0" fill="rgb(244,27,42)" rx="2" ry="2" />
<text  x="40.14" y="95.5" ></text>
</g>
<g >
<title>Morte.TestMorte.example10 (12 samples, 1.20%)</title><rect x="31.2" y="437" width="14.2" height="15.0" fill="rgb(236,95,52)" rx="2" ry="2" />
<text  x="34.24" y="447.5" ></text>
</g>
<g >
<title>L3.Core.debugCore (291 samples, 29.10%)</title><rect x="172.8" y="293" width="343.4" height="15.0" fill="rgb(253,228,1)" rx="2" ry="2" />
<text  x="175.84" y="303.5" >L3.Core.debugCore</text>
</g>
</g>
</svg>
