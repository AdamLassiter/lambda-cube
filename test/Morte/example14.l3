-- recursive.mt

-- The Haskell code we will translate to Morte:
--
--     import Prelude hiding ( (+), (*), IO, putStrLn, getLine, (>>=), (>>), return )
--
--     -- Simple prelude
--
--     data Nat = Succ Nat | Zero
--
--     zero :: Nat
--     zero = Zero
--
--     one :: Nat
--     one = Succ Zero
--
--     (+) :: Nat -> Nat -> Nat
--     Zero   + n = n
--     Succ m + n = m + Succ n
--
--     (*) :: Nat -> Nat -> Nat
--     Zero   * n = Zero
--     Succ m * n = n + (m * n)
--
--     foldNat :: Nat -> (a -> a) -> a -> a
--     foldNat  Zero    f x = x
--     foldNat (Succ m) f x = f (foldNat m f x)
--
--     data IO r = PutStrLn String (IO r) | GetLine (String -> IO r) | Return r
--
--     putStrLn :: String -> IO U
--     putStrLn str = PutStrLn str (Return Unit)
--
--     getLine :: IO String
--     getLine = GetLine Return
--
--     return :: a -> IO a
--     return = Return
--
--     (>>=) :: IO a -> (a -> IO b) -> IO b
--     PutStrLn str io >>= f = PutStrLn str (io >>= f)
--     GetLine k       >>= f = GetLine (\str -> k str >>= f)
--     Return r        >>= f = f r
--
--     -- Derived functions
--
--     (>>) :: IO U -> IO U -> IO U
--     m >> n = m >>= \_ -> n
--
--     two :: Nat
--     two = one + one
--
--     replicateM_ :: Nat -> IO U -> IO U
--     replicateM_ n io = foldNat n (io >>) (return Unit)
--
--     main_ :: IO U
--     main_ = getLine >>= putStrLn

-- "Free" variables
(   λ (String : *   )
->  λ (U : *)
->  λ (Unit : U)

    -- Simple prelude
->  (   λ (Nat : *)
    ->  λ (zero : Nat)
    ->  λ (one : Nat)
    ->  λ (plus : Nat -> Nat -> Nat)
    ->  λ (times : Nat -> Nat -> Nat)
    ->  λ (foldNat : Nat -> π (a : *) -> (a -> a) -> a -> a)
    ->  λ (IO : * -> *)
    ->  λ (return : π (a : *) -> a -> IO a)
    ->  λ (mApp
        :   π (a : *)
        ->  π (b : *)
        ->  IO a
        ->  (a -> IO b)
        ->  IO b
        )
    ->  λ (putStrLn : String -> IO U)
    ->  λ (getLine : IO String)

        -- Derived functions
    ->  (   λ (mThen : IO U -> IO U -> IO U)
        ->  λ (two   : Nat)
        ->  (   λ (replicateM_ : Nat -> IO U -> IO U)
            ->  λ (two : Nat)
            ->  replicateM_ two (mApp String U getLine putStrLn)
            )

            -- replicateM_
            (   λ (n : Nat)
            ->  λ (io : IO U)
            ->  foldNat n (IO U) (mThen io) (return U Unit)
            )

            -- two
            two
        )

        -- mThen
        (   λ (m : IO U)
        ->  λ (n : IO U)
        ->  mApp U U m (λ (_ : U) -> n)
        )

        -- two
        (plus one one)
    )

    -- Nat
    (   π (a : *)
    ->  (a -> a)
    ->  a
    ->  a
    )

    -- zero
    (   λ (a : *)
    ->  λ (Succ : a -> a)
    ->  λ (Zero : a)
    ->  Zero
    )

    -- one
    (   λ (a : *)
    ->  λ (Succ : a -> a)
    ->  λ (Zero : a)
    ->  Succ Zero
    )

    -- plus
    (   λ (m : π (a : *) -> (a -> a) -> a -> a)
    ->  λ (n : π (a : *) -> (a -> a) -> a -> a)
    ->  λ (a : *)
    ->  λ (Succ : a -> a)
    ->  λ (Zero : a)
    ->  m a Succ (n a Succ Zero)
    )

    -- times
    (   λ (m : π (a : *) -> (a -> a) -> a -> a)
    ->  λ (n : π (a : *) -> (a -> a) -> a -> a)
    ->  λ (a : *)
    ->  λ (Succ : a -> a)
    ->  λ (Zero : a)
    ->  m a (n a Succ) Zero
    )

    -- foldNat
    (   λ (n : π (a : *) -> (a -> a) -> a -> a)
    ->  n
    )

    -- IO
    (   λ (r : *)
    ->  π (x : *)
    ->  (String -> x -> x)
    ->  ((String -> x) -> x)
    ->  (r -> x)
    ->  x
    )

    -- return
    (   λ (a : *)
    ->  λ (va : a)
    ->  λ (x : *)
    ->  λ (PutStrLn : String -> x -> x)
    ->  λ (GetLine : (String -> x) -> x)
    ->  λ (Return : a -> x)
    ->  Return va
    )

    -- mApp
    (   λ (a : *)
    ->  λ (b : *)
    ->  λ (m : π (x : *)
        ->  (String -> x -> x)
        ->  ((String -> x) -> x)
        ->  (a -> x)
        ->  x
        )
    ->  λ (f : a
        ->  π (x : *)
        -> (String -> x -> x)
        -> ((String -> x) -> x)
        -> (b -> x)
        -> x
        )
    ->  λ (x : *)
    ->  λ (PutStrLn : String -> x -> x)
    ->  λ (GetLine : (String -> x) -> x)
    ->  λ (Return : b -> x)
    ->  m x PutStrLn GetLine (λ (va : a) -> f va x PutStrLn GetLine Return)
    )

    -- putStrLn
    (   λ (str : String)
    ->  λ (x : *)
    ->  λ (PutStrLn : String -> x -> x  )
    ->  λ (GetLine  : (String -> x) -> x)
    ->  λ (Return   : U -> x)
    ->  PutStrLn str (Return Unit)
    )

    -- getLine
    (   λ (x : *)
    ->  λ (PutStrLn : String -> x -> x  )
    ->  λ (GetLine  : (String -> x) -> x)
    ->  λ (Return   : String -> x)
    -> GetLine Return
    )
)
